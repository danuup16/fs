if game.PlaceId == 121864768012064 then ---ikan

-- KeyGuardian Configuration (Updated to match working example)
local publicToken = "5eabb6ca962c4acbb6c2a0c99b0d4637" -- Public Token dari KeyGuardian
local privateToken = "d3289eee7f4147fab9d22347a98b8dc7" -- Private Token dari KeyGuardian
local trueData = "f6b6b79e29ba4103a91cf856a0f39d07" -- Updated to match working example
local falseData = "869236c58d7d4b8a92bd568b24be49a3" -- Updated to match working example

local onMessage = function(message)  
    game:GetService("StarterGui"):SetCore("ChatMakeSystemMessage", { Text = message; }) 
end
local STORAGE_FOLDER = "djsstore"
local KEY_FILE = "djskey.txt"

repeat task.wait(0.1) until game:IsLoaded() and game.Players.LocalPlayer

local requestSending = false
local fSetClipboard, fRequest = setclipboard or toclipboard, request or http_request
local HttpService = game:GetService("HttpService")

-- Load KeyGuardian Library
local KeyGuardLibrary
local success, err = pcall(function()
    KeyGuardLibrary = loadstring(game:HttpGet("https://cdn.keyguardian.org/library/v1.0.0.lua"))()
end)

if not success then
    onMessage("Failed to load KeyGuardian library: " .. tostring(err))
    return
end
KeyGuardLibrary.Set({
    publicToken = publicToken,
    privateToken = privateToken,
    trueData = trueData,
    falseData = falseData,
})

-- File Management Functions
local function ensureFolder()
    if not isfolder then return false end
    if not isfolder(STORAGE_FOLDER) then
        makefolder(STORAGE_FOLDER)
    end
    return true
end

local function saveKeyToFile(key)
    if not writefile then 
        return false 
    end
    
    ensureFolder()
    local filePath = STORAGE_FOLDER .. "/" .. KEY_FILE
    
    local success, err = pcall(function()
        writefile(filePath, key)
    end)
    
    if success then
        return true
    else
        return false
    end
end

local function loadKeyFromFile()
    if not readfile or not isfile then 
        return nil 
    end
    
    local filePath = STORAGE_FOLDER .. "/" .. KEY_FILE
    
    if not isfile(filePath) then
        return nil
    end
    
    local success, key = pcall(function()
        return readfile(filePath)
    end)
    
    if success and key and key ~= "" then
        if #key > 5 then
            return key
        else
            return nil
        end
    else
        return nil
    end
end

local function deleteKeyFile()
    if not delfile or not isfile then return false end
    
    local filePath = STORAGE_FOLDER .. "/" .. KEY_FILE
    
    if isfile(filePath) then
        local success, err = pcall(function()
            delfile(filePath)
        end)
        
        if success then
            return true
        else
            return false
        end
    end
    
    return false
end

-- KeyGuardian Functions
local function getKeyLink()
    local success, link = pcall(function()
        return KeyGuardLibrary.getLink()
    end)
    
    if success and link then
        return link
    else
        onMessage("Failed to get key link from KeyGuardian")
        return nil
    end
end

local function copyLink()
    local link = getKeyLink()
    if link then
        if fSetClipboard then
            fSetClipboard(link)
        else
            onMessage("Clipboard function not available")
        end
    else
        onMessage("Failed to get link")
    end
end

-- FIXED: Use the correct KeyGuardian method like in the working example
local function verifyKey(key)
    if requestSending == true then
        onMessage("A request is already being sent, please slow down.")
        return false
    else
        requestSending = true
    end
    
    -- Clean and validate the key
    if not key or key == "" then
        requestSending = false
        onMessage("Please enter a key.")
        return false
    end
    
    -- Remove any whitespace and invisible characters
    key = key:gsub("%s+", ""):gsub("[\r\n\t]", "")
    
    if #key < 5 then
        requestSending = false
        onMessage("Key is too short. Please check your key.")
        return false
    end
    
    -- Debug: Show key length for troubleshooting
    onMessage("Verifying key (Length: " .. #key .. ")...")
    
    local success, result = pcall(function()
        -- Use the EXACT same method as the working example
        return KeyGuardLibrary.validateDefaultKey(key)
    end)
    
    requestSending = false
    
    if success then
        onMessage("Server response received. Processing...")
        
        -- Use the EXACT same comparison as the working example
        if result == trueData then
            saveKeyToFile(key)
            onMessage("Key verified successfully!")
            return true
        else
            onMessage("Key is invalid or expired. Response: " .. tostring(result))
            deleteKeyFile()
            return false
        end
    else
        -- Enhanced error handling
        local errorMsg = tostring(result)
        if errorMsg:find("HTTP 403") or errorMsg:find("Forbidden") then
            onMessage("Key is invalid or expired. Please get a new key.")
        elseif errorMsg:find("HTTP 429") or errorMsg:find("rate") then
            onMessage("Too many requests. Please wait a moment and try again.")
        elseif errorMsg:find("timeout") or errorMsg:find("network") then
            onMessage("Network error. Please check your connection and try again.")
        else
            onMessage("Verification error: " .. errorMsg)
        end
        return false
    end
end

-- FIXED: Improved auto check function
local function autoCheckSavedKey()
    local savedKey = loadKeyFromFile()
    
    if not savedKey then
        return false
    end
    
    onMessage("Found saved key. Verifying...")
    
    -- Use the same verification logic as manual entry
    local isValid = verifyKey(savedKey)
    
    if isValid then
        onMessage("Loading script...")
        
        -- Load main script immediately
        task.spawn(function()
            task.wait(0.5) -- Small delay to show message
            local scriptSuccess, scriptError = pcall(function()
                loadstring(game:HttpGet("https://raw.githubusercontent.com/danuup16/fs/refs/heads/main/fs"))()
            end)
            
            if not scriptSuccess then
                onMessage("Error loading main script: " .. tostring(scriptError))
            end
        end)
        
        return true
    else
        onMessage("Saved key is no longer valid. Please enter a new key.")
        deleteKeyFile() -- Remove invalid saved key
        return false
    end
end

-- Check saved key first
if autoCheckSavedKey() then
    return
end

-- Create Key System UI with Error Handling
task.spawn(function()
    local Players = game:GetService("Players")
    local TweenService = game:GetService("TweenService")
    local player = Players.LocalPlayer
    
    -- Wait for PlayerGui
    local playerGui = player:WaitForChild("PlayerGui")
    
    -- Create main GUI
    local KeySystemGui = Instance.new("ScreenGui")
    KeySystemGui.Name = "KeySystemGui"
    KeySystemGui.Parent = playerGui
    KeySystemGui.ResetOnSpawn = false
    KeySystemGui.IgnoreGuiInset = true
    
    -- Main container with responsive sizing
    local Container = Instance.new("Frame")
    Container.Name = "Container"
    Container.Parent = KeySystemGui
    Container.AnchorPoint = Vector2.new(0.5, 0.5)
    Container.Position = UDim2.new(0.5, 0, 0.5, 0)
    Container.BackgroundTransparency = 1
    Container.Size = UDim2.new(0, 400, 0, 240)
    
    -- Main Frame with improved styling
    local MainFrame = Instance.new("Frame")
    MainFrame.Name = "MainFrame"
    MainFrame.Parent = Container
    MainFrame.Size = UDim2.new(1, 0, 1, 0)
    MainFrame.Position = UDim2.new(0, 0, 0, 0)
    MainFrame.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    MainFrame.BorderSizePixel = 0
    
    -- Frame styling
    local MainCorner = Instance.new("UICorner")
    MainCorner.CornerRadius = UDim.new(0, 10)
    MainCorner.Parent = MainFrame
    
    local MainGradient = Instance.new("UIGradient")
    MainGradient.Color = ColorSequence.new{
        ColorSequenceKeypoint.new(0.00, Color3.fromRGB(53, 53, 53)), 
        ColorSequenceKeypoint.new(0.50, Color3.fromRGB(50, 50, 50)), 
        ColorSequenceKeypoint.new(1.00, Color3.fromRGB(53, 53, 53))
    }
    MainGradient.Transparency = NumberSequence.new{
        NumberSequenceKeypoint.new(0.00, 0.24), 
        NumberSequenceKeypoint.new(0.47, 0.00), 
        NumberSequenceKeypoint.new(1.00, 0.24)
    }
    MainGradient.Parent = MainFrame
    
    -- Title/Logo section
    local TitleFrame = Instance.new("Frame")
    TitleFrame.Name = "TitleFrame"
    TitleFrame.Parent = MainFrame
    TitleFrame.Size = UDim2.new(1, -20, 0, 60)
    TitleFrame.Position = UDim2.new(0, 10, 0, 10)
    TitleFrame.BackgroundTransparency = 1
    
    local LogoImage = Instance.new("ImageLabel")
    LogoImage.Name = "LogoImage"
    LogoImage.Parent = TitleFrame
    LogoImage.Size = UDim2.new(0, 120, 0, 120)
    LogoImage.Position = UDim2.new(0.5, -55, 0, -20)
    LogoImage.BackgroundTransparency = 1
    LogoImage.Image = "rbxassetid://125181034874810"
    LogoImage.ImageTransparency = 0.25
    
    local LogoCorner = Instance.new("UICorner")
    LogoCorner.CornerRadius = UDim.new(0, 8)
    LogoCorner.Parent = LogoImage
    
    -- Close button with improved positioning
    local CloseButton = Instance.new("TextButton")
    CloseButton.Name = "CloseButton"
    CloseButton.Parent = TitleFrame
    CloseButton.Size = UDim2.new(0, 30, 0, 30)
    CloseButton.Position = UDim2.new(1, -35, 0, 5)
    CloseButton.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    CloseButton.BackgroundTransparency = 0.65
    CloseButton.Text = ""
    CloseButton.TextColor3 = Color3.fromRGB(255, 255, 255)
    CloseButton.TextScaled = true
    CloseButton.Font = Enum.Font.SourceSans
    
    local CloseCorner = Instance.new("UICorner")
    CloseCorner.CornerRadius = UDim.new(0, 10)
    CloseCorner.Parent = CloseButton
    
    local CloseGradient = Instance.new("UIGradient")
    CloseGradient.Color = ColorSequence.new{
        ColorSequenceKeypoint.new(0.00, Color3.fromRGB(140, 140, 140)), 
        ColorSequenceKeypoint.new(0.50, Color3.fromRGB(129, 129, 129)), 
        ColorSequenceKeypoint.new(1.00, Color3.fromRGB(140, 140, 140))
    }
    CloseGradient.Parent = CloseButton
    
    local CloseImage = Instance.new("ImageLabel")
    CloseImage.Name = "CloseImage"
    CloseImage.Parent = CloseButton
    CloseImage.BackgroundTransparency = 1
    CloseImage.Position = UDim2.new(0.107, 0, 0.107, 0)
    CloseImage.Size = UDim2.new(0.75, 0, 0.75, 0)
    CloseImage.Image = "rbxassetid://10747384394"
    CloseImage.ImageTransparency = 0.3
    
    -- Status/Result text
    local StatusLabel = Instance.new("TextLabel")
    StatusLabel.Name = "StatusLabel"
    StatusLabel.Parent = MainFrame
    StatusLabel.Size = UDim2.new(1, -20, 0, 25)
    StatusLabel.Position = UDim2.new(0, 10, 0, 80)
    StatusLabel.BackgroundTransparency = 1
    StatusLabel.Text = ""
    StatusLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
    StatusLabel.TextTransparency = 0.35
    StatusLabel.TextScaled = true
    StatusLabel.TextWrapped = true
    StatusLabel.Font = Enum.Font.Cartoon
    
    local StatusTextSize = Instance.new("UITextSizeConstraint")
    StatusTextSize.MaxTextSize = 14
    StatusTextSize.Parent = StatusLabel
    
    -- Input section
    local InputFrame = Instance.new("Frame")
    InputFrame.Name = "InputFrame"
    InputFrame.Parent = MainFrame
    InputFrame.Size = UDim2.new(1, -20, 0, 40)
    InputFrame.Position = UDim2.new(0, 10, 0, 115)
    InputFrame.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    InputFrame.BackgroundTransparency = 0.65
    
    local InputCorner = Instance.new("UICorner")
    InputCorner.CornerRadius = UDim.new(0, 10)
    InputCorner.Parent = InputFrame
    
    local InputGradient = Instance.new("UIGradient")
    InputGradient.Color = ColorSequence.new{
        ColorSequenceKeypoint.new(0.00, Color3.fromRGB(140, 140, 140)), 
        ColorSequenceKeypoint.new(0.50, Color3.fromRGB(129, 129, 129)), 
        ColorSequenceKeypoint.new(1.00, Color3.fromRGB(140, 140, 140))
    }
    InputGradient.Parent = InputFrame
    
    local KeyTextBox = Instance.new("TextBox")
    KeyTextBox.Name = "KeyTextBox"
    KeyTextBox.Parent = InputFrame
    KeyTextBox.Size = UDim2.new(1, -16, 1, -8)
    KeyTextBox.Position = UDim2.new(0, 8, 0, 4)
    KeyTextBox.BackgroundTransparency = 1
    KeyTextBox.Text = ""
    KeyTextBox.PlaceholderText = "Enter your key here"
    KeyTextBox.PlaceholderColor3 = Color3.fromRGB(143, 143, 145)
    KeyTextBox.TextColor3 = Color3.fromRGB(187, 188, 190)
    KeyTextBox.TextScaled = true
    KeyTextBox.TextWrapped = true
    KeyTextBox.Font = Enum.Font.SourceSans
    KeyTextBox.ClearTextOnFocus = false
    
    local InputTextSize = Instance.new("UITextSizeConstraint")
    InputTextSize.MaxTextSize = 16
    InputTextSize.Parent = KeyTextBox
    
    -- Button container
    local ButtonFrame = Instance.new("Frame")
    ButtonFrame.Name = "ButtonFrame"
    ButtonFrame.Parent = MainFrame
    ButtonFrame.Size = UDim2.new(1, -20, 0, 35)
    ButtonFrame.Position = UDim2.new(0, 10, 0, 165)
    ButtonFrame.BackgroundTransparency = 1
    
    -- Button layout
    local ButtonLayout = Instance.new("UIListLayout")
    ButtonLayout.Parent = ButtonFrame
    ButtonLayout.FillDirection = Enum.FillDirection.Horizontal
    ButtonLayout.HorizontalAlignment = Enum.HorizontalAlignment.Center
    ButtonLayout.VerticalAlignment = Enum.VerticalAlignment.Center
    ButtonLayout.Padding = UDim.new(0, 10)
    
    -- Get Key Button
    local GetKeyButton = Instance.new("TextButton")
    GetKeyButton.Name = "GetKeyButton"
    GetKeyButton.Parent = ButtonFrame
    GetKeyButton.Size = UDim2.new(0, 120, 1, 0)
    GetKeyButton.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    GetKeyButton.BackgroundTransparency = 0.65
    GetKeyButton.Text = ""
    GetKeyButton.TextColor3 = Color3.fromRGB(255, 255, 255)
    GetKeyButton.TextScaled = true
    GetKeyButton.Font = Enum.Font.SourceSans
    
    local GetKeyCorner = Instance.new("UICorner")
    GetKeyCorner.CornerRadius = UDim.new(0, 10)
    GetKeyCorner.Parent = GetKeyButton
    
    local GetKeyGradient = Instance.new("UIGradient")
    GetKeyGradient.Color = ColorSequence.new{
        ColorSequenceKeypoint.new(0.00, Color3.fromRGB(140, 140, 140)), 
        ColorSequenceKeypoint.new(0.50, Color3.fromRGB(129, 129, 129)), 
        ColorSequenceKeypoint.new(1.00, Color3.fromRGB(140, 140, 140))
    }
    GetKeyGradient.Parent = GetKeyButton
    
    local GetKeyLabel = Instance.new("TextLabel")
    GetKeyLabel.Parent = GetKeyButton
    GetKeyLabel.BackgroundTransparency = 1
    GetKeyLabel.Size = UDim2.new(1, 0, 1, 0)
    GetKeyLabel.Position = UDim2.new(0, 0, 0, 0)
    GetKeyLabel.Font = Enum.Font.Cartoon
    GetKeyLabel.Text = "Get Key"
    GetKeyLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
    GetKeyLabel.TextScaled = true
    GetKeyLabel.TextTransparency = 0.35
    
    local GetKeyTextSize = Instance.new("UITextSizeConstraint")
    GetKeyTextSize.MaxTextSize = 15
    GetKeyTextSize.Parent = GetKeyLabel
    
    -- Enter/Verify Button
    local VerifyButton = Instance.new("TextButton")
    VerifyButton.Name = "VerifyButton"
    VerifyButton.Parent = ButtonFrame
    VerifyButton.Size = UDim2.new(0, 120, 1, 0)
    VerifyButton.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    VerifyButton.BackgroundTransparency = 0.65
    VerifyButton.Text = ""
    VerifyButton.TextColor3 = Color3.fromRGB(255, 255, 255)
    VerifyButton.TextScaled = true
    VerifyButton.Font = Enum.Font.SourceSans
    
    local VerifyCorner = Instance.new("UICorner")
    VerifyCorner.CornerRadius = UDim.new(0, 10)
    VerifyCorner.Parent = VerifyButton
    
    local VerifyGradient = Instance.new("UIGradient")
    VerifyGradient.Color = ColorSequence.new{
        ColorSequenceKeypoint.new(0.00, Color3.fromRGB(140, 140, 140)), 
        ColorSequenceKeypoint.new(0.50, Color3.fromRGB(129, 129, 129)), 
        ColorSequenceKeypoint.new(1.00, Color3.fromRGB(140, 140, 140))
    }
    VerifyGradient.Parent = VerifyButton
    
    local VerifyLabel = Instance.new("TextLabel")
    VerifyLabel.Parent = VerifyButton
    VerifyLabel.BackgroundTransparency = 1
    VerifyLabel.Size = UDim2.new(1, 0, 1, 0)
    VerifyLabel.Position = UDim2.new(0, 0, 0, 0)
    VerifyLabel.Font = Enum.Font.Cartoon
    VerifyLabel.Text = "Enter"
    VerifyLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
    VerifyLabel.TextScaled = true
    VerifyLabel.TextTransparency = 0.35
    
    local VerifyTextSize = Instance.new("UITextSizeConstraint")
    VerifyTextSize.MaxTextSize = 15
    VerifyTextSize.Parent = VerifyLabel
    
    -- Button hover effects
    local function addButtonHoverEffect(button, normalTransparency, hoverTransparency)
        button.MouseEnter:Connect(function()
            if button and button.Parent then
                local tween = TweenService:Create(
                    button,
                    TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out),
                    {BackgroundTransparency = hoverTransparency}
                )
                tween:Play()
            end
        end)
        
        button.MouseLeave:Connect(function()
            if button and button.Parent then
                local tween = TweenService:Create(
                    button,
                    TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out),
                    {BackgroundTransparency = normalTransparency}
                )
                tween:Play()
            end
        end)
    end
    
    addButtonHoverEffect(GetKeyButton, 0.65, 0.5)
    addButtonHoverEffect(VerifyButton, 0.65, 0.5)
    addButtonHoverEffect(CloseButton, 0.65, 0.5)
    
    -- Input focus effects
    KeyTextBox.Focused:Connect(function()
        if InputFrame and InputFrame.Parent then
            local tween = TweenService:Create(
                InputFrame,
                TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out),
                {BackgroundTransparency = 0.5}
            )
            tween:Play()
        end
    end)
    
    KeyTextBox.FocusLost:Connect(function(enterPressed)
        if InputFrame and InputFrame.Parent then
            local tween = TweenService:Create(
                InputFrame,
                TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out),
                {BackgroundTransparency = 0.65}
            )
            tween:Play()
        end
        
        if enterPressed and VerifyButton and VerifyButton.Parent then
            VerifyButton.MouseButton1Click:Fire()
        end
    end)
    
    -- Event connections with safety checks
    GetKeyButton.MouseButton1Click:Connect(function()
        if requestSending then
            if StatusLabel and StatusLabel.Parent then
                StatusLabel.Text = "Please wait..."
            end
            return
        end
        
        if StatusLabel and StatusLabel.Parent then
            StatusLabel.Text = "📋 Getting key link..."
            StatusLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
            StatusLabel.TextTransparency = 0.35
        end
        
        task.spawn(function()
            local success, err = pcall(function()
                copyLink()
            end)
            
            if StatusLabel and StatusLabel.Parent then
                if success then
                    StatusLabel.Text = "Link copied! Paste in browser to get key"
                    StatusLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
                    StatusLabel.TextTransparency = 0.35
                else
                    StatusLabel.Text = "Failed to get key link!"
                    StatusLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
                    StatusLabel.TextTransparency = 0.35
                    onMessage("Error getting link: " .. tostring(err))
                end
            end
        end)
    end)
    
    VerifyButton.MouseButton1Click:Connect(function()
        if requestSending then
            if StatusLabel and StatusLabel.Parent then
                StatusLabel.Text = "Please wait, verification in progress..."
                StatusLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
                StatusLabel.TextTransparency = 0.35
            end
            return
        end
        
        local inputText = ""
        if KeyTextBox and KeyTextBox.Parent then
            inputText = KeyTextBox.Text or ""
        end
        
        if inputText == "" then
            if StatusLabel and StatusLabel.Parent then
                StatusLabel.Text = "Please enter a key first!"
                StatusLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
                StatusLabel.TextTransparency = 0.35
            end
            return
        end
        
        local inputKey = inputText:gsub("%s+", ""):gsub("[\r\n\t]", ""):gsub("^%s*(.-)%s*$", "%1")
        
        if #inputKey < 5 then
            if StatusLabel and StatusLabel.Parent then
                StatusLabel.Text = "Key too short! Please check your key."
                StatusLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
                StatusLabel.TextTransparency = 0.35
            end
            return
        end
        
        if StatusLabel and StatusLabel.Parent then
            StatusLabel.Text = "Verifying key..."
            StatusLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
            StatusLabel.TextTransparency = 0.35
        end
        
        task.spawn(function()
            local verificationResult = verifyKey(inputKey)
            
            if verificationResult then
                if StatusLabel and StatusLabel.Parent then
                    StatusLabel.Text = "Key valid! Loading script..."
                    StatusLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
                    StatusLabel.TextTransparency = 0.35
                end
                if KeyTextBox and KeyTextBox.Parent then
                    KeyTextBox.Text = ""
                end
                
                task.spawn(function()
                    task.wait(1)
                    local scriptSuccess, scriptError = pcall(function()
                        loadstring(game:HttpGet("https://raw.githubusercontent.com/danuup16/fs/refs/heads/main/fs"))()
                    end)
                    
                    if scriptSuccess then
                        onMessage("Script loaded successfully!")
                        task.wait(0.5)
                        if KeySystemGui and KeySystemGui.Parent then
                            KeySystemGui:Destroy()
                        end
                    else
                        if StatusLabel and StatusLabel.Parent then
                            StatusLabel.Text = "Error loading script!"
                            StatusLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
                            StatusLabel.TextTransparency = 0.35
                        end
                        onMessage("Script loading error: " .. tostring(scriptError))
                    end
                end)
            else
                if StatusLabel and StatusLabel.Parent then
                    StatusLabel.Text = "Invalid or expired key!"
                    StatusLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
                    StatusLabel.TextTransparency = 0.35
                end
                if KeyTextBox and KeyTextBox.Parent then
                    KeyTextBox.Text = ""
                end
            end
        end)
    end)
    
    CloseButton.MouseButton1Click:Connect(function()
        if KeySystemGui and KeySystemGui.Parent then
            KeySystemGui:Destroy()
        end
    end)
    
    -- Clear status when typing with safety check
    if KeyTextBox then
        KeyTextBox:GetPropertyChangedSignal("Text"):Connect(function()
            if KeyTextBox and KeyTextBox.Parent and StatusLabel and StatusLabel.Parent then
                local currentText = KeyTextBox.Text or ""
                local statusText = StatusLabel.Text or ""
                if currentText ~= "" and statusText:find("⚠️") then
                    StatusLabel.Text = ""
                end
            end
        end)
    end
end)

-- Test KeyGuardian connection
local function testKeyGuardianConnection()
    task.spawn(function()
        task.wait(2)
        
        local success, result = pcall(function()
            if KeyGuardLibrary then
                onMessage("🔗 KeyGuardian library loaded successfully!")
                
                if KeyGuardLibrary.getLink then
                    local link = KeyGuardLibrary.getLink()
                    if link then
                        onMessage("KeyGuardian link generation working!")
                        return true
                    else
                        onMessage("KeyGuardian link generation returned nil!")
                        return false
                    end
                else
                    onMessage("KeyGuardLibrary.getLink function not found!")
                    return false
                end
            else
                onMessage("KeyGuardian library is nil!")
                return false
            end
        end)
        
        if not success then
            onMessage("KeyGuardian connection error: " .. tostring(result))
        end
    end)
end
testKeyGuardianConnection()
end
